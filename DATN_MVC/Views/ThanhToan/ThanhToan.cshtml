@model DATN_MVC.Models.Modeltong
@{
	ViewData["Title"] = "ThanhToan";
	Layout = "~/Views/Shared/_Layout.cshtml";

	
}
<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8">
	<title>Thông tin Giao hàng và Thanh toán</title>
	<style>
		body {
			font-family: Arial, sans-serif;
			margin: 40px;
			background-color: #f9f9f9;
		}

		h2 {
			color: #333;
		}

		.section {
			background-color: #fff;
			padding: 20px;
			margin-bottom: 20px;
			border-radius: 10px;
			box-shadow: 0 0 10px #ddd;
		}

		label {
			display: block;
			margin-top: 10px;
		}

		input, select {
			width: 100%;
			padding: 8px;
			margin-top: 4px;
			border: 1px solid #ccc;
			border-radius: 6px;
		}

		.radio-group {
			margin-top: 10px;
		}

			.radio-group label {
				display: block;
			}

		button, .btn-pay {
			padding: 10px 20px;
			font-size: 16px;
			color: white;
			border: none;
			border-radius: 6px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

		button {
			background-color: #c90000;
		}

			button:hover {
				background-color: #a30000;
			}

		.btn-pay {
			background-color: #28a745;
			margin-top: 15px;
		}

			.btn-pay:hover {
				background-color: #218838;
			}

		/* Summary section styles */
		.section.summary {
			font-family: 'Segoe UI', sans-serif;
			background: #f9f9f9;
			box-shadow: 0 2px 8px rgba(0,0,0,0.1);
			max-width: 1300px;
			margin: auto;
		}

			.section.summary h5 {
				font-size: 22px;
				margin-bottom: 20px;
				color: #333;
				border-left: 5px solid #007bff;
				padding-left: 10px;
			}

		.item-summary {
			display: flex;
			align-items: flex-start;
			gap: 15px;
			margin-bottom: 20px;
			border-bottom: 1px solid #ddd;
			padding-bottom: 15px;
		}

			.item-summary img {
				width: 100px;
				height: auto;
				border-radius: 5px;
			}

			.item-summary p {
				margin: 3px 0;
				color: #444;
			}

		.item-info {
			flex: 1;
		}

		.order-summary {
			background-color: #fff;
			border: 1px solid #ddd;
			padding: 15px;
			border-radius: 8px;
			margin-top: 20px;
		}

			.order-summary h6 {
				font-size: 18px;
				margin-bottom: 10px;
				color: #007bff;
			}

			.order-summary p {
				margin: 5px 0;
				color: #555;
			}

		/* Payment methods */
		.payment-methods {
			display: flex;
			flex-direction: column;
			gap: 15px;
			margin-top: 15px;
		}

		.payment-option {
			display: block;
			border: 2px solid #ccc;
			border-radius: 10px;
			background-color: #f8f8f8;
			padding: 12px;
			cursor: pointer;
			transition: all 0.3s;
		}

			.payment-option:hover {
				background-color: #f0f0f0;
				border-color: #999;
			}

			.payment-option:has(input[type="checkbox"]:checked) {
				background-color: #e0f7fa;
				border-color: #00acc1;
			}

		.option-content {
			display: flex;
			align-items: center;
			justify-content: space-between;
			gap: 10px;
		}

			.option-content img {
				height: 24px;
			}

			.option-content input[type="checkbox"] {
				transform: scale(1.3);
				cursor: pointer;
			}

	</style>

</head>
<body>
	<div id="thongbao" style="margin-top: 10px; color: red;"></div>
	<form asp-action="Xacnhanthanhtoan" method="post">
		<div class="section">

			<h5>Địa Chỉ Giao Hàng</h5>
			<label>
				Họ và tên người nhận
				<input type="text" value="@Model.NguoiDung.TenNguoiDung">
			</label>
			<label>
				Email
				<input type="email" value="@Model.NguoiDung.Email">
			</label>
			<label>
				Số điện thoại
				<input type="text" name="SDT" value="@Model.NguoiDung.SoDienThoai">
			</label>

			<label>
				Quốc gia
				<select required>
					<option value="Vietnam" selected>Việt Nam</option>
				</select>
			</label>
			<label>
				Tỉnh/Thành phố
				<select id="province" name="Province" onchange="loadDistricts(); updateProvinceName()" required>
					<option value="">-- Chọn tỉnh --</option>
				</select>
				<input type="hidden" id="provinceName" name="ProvinceName" />
			</label>

			<label>
				Quận/Huyện
				<select id="district" name="District" onchange="loadWards(); updateDistrictName()" required>
					<option value="">-- Chọn huyện --</option>
				</select>
				<input type="hidden" id="districtName" name="DistrictName" />
			</label>

			<label>
				Phường/Xã
				<select id="ward" name="Ward" onchange="updateWardName()" required>
					<option value="">-- Chọn xã --</option>
				</select>
				<input type="hidden" id="wardName" name="WardName" />
			</label>
			<label>
				Địa chỉ nhận hàng
				<input type="text" name="Diachi" required>
			</label>

			
		</div>
		<div class="section">
			<h5>Phương Thức Thanh Toán</h5>

			<div class="payment-methods">
				<label class="payment-option">
					<div class="option-content">
						<span>Thanh toán khi nhận hàng (COD)</span>
						<input type="radio" name="Phuongthuc" value="COD" />
					</div>
				</label>
				<label class="payment-option">
					<div class="option-content">
						<img src="~/images/Logo VCB webp.webp" alt="Vietcombank" />
						<span>Chuyển khoản Vietcombank</span>
						<input type="radio" name="Phuongthuc" value="VCB" />
					</div>
				</label>

				<label class="payment-option">
					<div class="option-content">
						<img src="~/images/logo momo.svg" alt="MoMo" />
						<span>Thanh toán bằng MoMo</span>
						<input type="radio" name="Phuongthuc" value="MoMo" />
					</div>
				</label>
			</div>

		</div>
		<div class="section summary">
			<h5>Tóm Tắt Đơn Hàng</h5>

			@if (Model.ThongTins.Count > 0)
			{
				@for (int i = 0; i < Model.ThongTins.Count; i++)
				{
					<div class="item-summary">
						<img src="@Url.Content(Model.ThongTins[i].HinhAnh)" alt="Hình ảnh sách" class="item-image" />
						<div class="item-info">
							<input type="hidden" name="masach" value="@Model.ThongTins[i].MaSach" />
							<input type="hidden" name="soluong" value="@Model.ThongTins[i].SoLuong" />
							<p><strong>@Model.ThongTins[i].TenSach</strong></p>
							<p><strong>Số lượng:</strong> @Model.ThongTins[i].SoLuong</p>
							<p><strong>Giá:</strong> @Model.ThongTins[i].GiaBan đ</p>
							<p><strong>Thành tiền:</strong> @((Model.ThongTins[i].GiaBan ?? 0) * (Model.ThongTins[i].SoLuong ?? 0)) đ</p>
						</div>
					</div>
				}
			}
			else
			{
				<p>Không có sản phẩm nào trong giỏ hàng.</p>
			}

			@if (Model.ThongTins.Count > 0)
			{
				<div class="order-summary">
					<h6>Chi tiết đơn hàng:</h6>

					@{
						var tongTien = Model.ThongTins.Sum(item => (item.GiaBan ?? 0) * (item.SoLuong ?? 0));
						// Kiểm tra xem tỉnh thành là Đà Nẵng hay không
						
						
					}
					<p><strong>Tổng Số Tiền: <span id="totalPrice">@tongTien đ</span></strong></p>

					<input type="hidden" id="shippingFeeInput" name="Phivanchuyen" />

					<button class="btn-pay" type="submit" onclick="payOrder()">Xác nhận thanh toán</button>
				</div>
			}


		</div>
	</form>
	<script>
		async function loadProvinces() {
			const res = await fetch("https://provinces.open-api.vn/api/p/");
			const provinces = await res.json();
			const select = document.getElementById("province");

			provinces.forEach(p => {
				const opt = document.createElement("option");
				opt.value = p.code;
				opt.text = p.name;
				opt.setAttribute('data-name', p.name);
				select.appendChild(opt);
			});
		}
		function updateProvinceName() {
			const selectedOption = document.getElementById("province").selectedOptions[0];
			const name = selectedOption.getAttribute('data-name') || "";
			document.getElementById("provinceName").value = name;
			updateShippingFee(name);
		
		}
		// tính tông tiền kềm tiền ship 
		function updateShippingFee(provinceName) {
			// Tính tổng tiền sản phẩm (ví dụ, từ Model)
			const tienShip = (provinceName === "Thành phố Đà Nẵng") ? 15000 : 30000;

			// Tính tổng tiền sản phẩm (ví dụ, từ Model)
			let tongTien = @Model.ThongTins.Sum(item => (item.GiaBan ?? 0) * (item.SoLuong ?? 0));
			// Cộng tiền ship vào tổng tiền
			tongTien += tienShip;
			// Cập nhật phí vận chuyển và tổng tiền trong HTML
			document.getElementById('shippingFeeInput').value = tienShip;
			document.getElementById('totalPrice').innerText = `${tongTien} đ`;
		}
		async function loadDistricts() {
			const provinceCode = document.getElementById("province").value;
			const res = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
			const data = await res.json();
			const districtSelect = document.getElementById("district");
			districtSelect.innerHTML = '<option value="">-- Chọn huyện --</option>';
			document.getElementById("ward").innerHTML = '<option value="">-- Chọn xã --</option>';

			data.districts.forEach(d => {
				const opt = document.createElement("option");
				opt.value = d.code;
				opt.text = d.name;
				opt.setAttribute('data-name', d.name);
				districtSelect.appendChild(opt);
			});
		}

		function updateDistrictName() {
			const selected = document.getElementById("district").selectedOptions[0];
			document.getElementById("districtName").value = selected?.getAttribute('data-name') || "";
		}

		async function loadWards() {
			const districtCode = document.getElementById("district").value;
			const res = await fetch(`https://provinces.open-api.vn/api/d/${districtCode}?depth=2`);
			const data = await res.json();
			const wardSelect = document.getElementById("ward");
			wardSelect.innerHTML = '<option value="">-- Chọn xã --</option>';

			data.wards.forEach(w => {
				const opt = document.createElement("option");
				opt.value = w.code;
				opt.text = w.name;
				opt.setAttribute('data-name', w.name);
				wardSelect.appendChild(opt);
			});
		}

		function updateWardName() {
			const selected = document.getElementById("ward").selectedOptions[0];
			document.getElementById("wardName").value = selected?.getAttribute('data-name') || "";
		}

		// Gọi hàm load tỉnh khi trang web load
		loadProvinces();
	</script>
</body>

</html>
