@model DATN_MVC.Models.Modeltong
@{
	ViewData["Title"] = "Giỏ Hàng";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8">
	<title>Giỏ Hàng</title>

	<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">

	<style>
		body {
			font-family: 'Roboto', sans-serif;
		}

		.card h6,
		h6 {
			font-size: 15px;
		}

		.btn-outline-primary,
		.btn-danger {
			border-radius: 999px;
		}

		.rounded-4 {
			border-radius: 1rem !important;
		}

		.shadow-sm {
			box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;
		}

		.button-container {
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: Arial, sans-serif;
		}

		.rounded-circle {
			display: inline-flex;
			align-items: center;
			justify-content: center;
			width: 40px;
			height: 40px;
			background-color: #3498db;
			color: white;
			font-size: 20px;
			border: none;
			border-radius: 50%;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			.rounded-circle:hover {
				background-color: #2980b9;
			}

		.mx-2 {
			margin: 0 10px;
			font-size: 20px;
		}

		.btn-pay {
			background: linear-gradient(135deg, #ff416c, #ff4b2b);
			color: white;
			border: none;
			border-radius: 999px;
			padding: 12px 0;
			font-size: 16px;
			font-weight: bold;
			transition: all 0.3s ease;
			box-shadow: 0 4px 12px rgba(255, 65, 108, 0.3);
		}

			.btn-pay:hover {
				background: linear-gradient(135deg, #ff4b2b, #ff416c);
				box-shadow: 0 6px 16px rgba(255, 65, 108, 0.5);
				transform: translateY(-1px);
			}
	</style>
	<style>
		.quantity-wrapper {
			display: inline-flex;
			align-items: center;
			border: 1px solid #ccc;
			border-radius: 30px;
			overflow: hidden;
			width: fit-content;
			background-color: #f8f9fa;
		}

		.quantity-btn {
			background-color: #e74c3c;
			color: white;
			border: none;
			padding: 6px 12px;
			font-size: 18px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			.quantity-btn:hover {
				background-color: #c0392b;
			}

		.quantity-number {
			min-width: 40px;
			text-align: center;
			display: inline-block;
			font-size: 16px;
			font-weight: 500;
			padding: 0 10px;
			background-color: white;
		}

	</style>

	<script>
		function toggleAll(source) {
			const checkboxes = document.querySelectorAll('.item-checkbox');
			checkboxes.forEach(cb => cb.checked = source.checked);
		}
	</script>


</head>
<body class="bg-light">

	<div class="container py-4">
		<h4 class="mb-4 fw-bold">🛒 GIỎ HÀNG</h4>
		<div class="row g-4">
			<!-- Cột trái: Sản phẩm -->
			<div class="col-lg-8">
				<div class="bg-white rounded-4 p-3 shadow-sm border">
					<div class="d-flex align-items-center mb-3">
						<input class="form-check-input me-2" type="checkbox" onclick="toggleAll(this)">
						<label class="form-check-label fw-semibold">Chọn tất cả (1 sản phẩm)</label>
					</div>

					<!-- Lặp qua danh sách sản phẩm trong giỏ hàng -->
					@for (int i = 0; i < Model.GioHangs.Count; i++)
					{
						var item = Model.GioHangs[i];
						<form asp-action="ThayDoiGio" asp-controller="GioHang" method="post" class="quantity-form" id="form-@item.MaSach">
							<div class="d-flex align-items-start border-top pt-3">
								<!-- Checkbox để chọn sản phẩm -->
								<input class="form-check-input mt-2 me-3 item-checkbox product-checkbox" id="checkbox-@item.MaSach" data-masach="@item.MaSach" type="checkbox" checked>
								<img src="@Url.Content(item.HinhAnh)" class="me-3 rounded-3" width="80" alt="@item.TenSach" />
								<div class="flex-grow-1">
									<h6 class="mb-1 fw-medium">@item.TenSach</h6>
									<div class="quantity-wrapper mt-2">
										<button type="button" class="quantity-btn" onclick="updateQuantity('@item.MaSach', -1)">−</button>
										<span class="quantity-number" id="quantity-@item.MaSach">@item.Soluong</span>
										<button type="button" class="quantity-btn" onclick="updateQuantity('@item.MaSach', 1)">+</button>

										<input type="hidden" name="MaSach" value="@item.MaSach" />
										<input type="hidden" name="SoLuong" id="input-quantity-@item.MaSach" value="@item.Soluong" />
									</div>

								</div>

								<!-- Thêm phần hiển thị giá -->
								<div class="text-danger fw-bold fs-6" id="price-@item.MaSach">@item.GiaBan đ</div> <!-- Giá của sản phẩm -->
							</div>
						</form>
					}

				</div>
			</div>

			<!-- Cột phải: Thanh toán -->
			<div class="col-lg-4">
				<div class="bg-white rounded-4 p-3 shadow-sm border">
					<div class="d-flex justify-content-between mb-2">
						<span>Thành tiền</span>
						<strong>@Model.GioHangs.Sum(g => g.GiaBan * g.Soluong) đ</strong>
					</div>
					<div class="d-flex justify-content-between mb-3">
						<strong class="fs-6">Tổng Số Tiền (gồm VAT)</strong>
						<strong class="tong-tien">@Model.GioHangs.Sum(g => g.GiaBan * g.Soluong) đ</strong>
					</div>
					<form asp-controller="ThanhToan" asp-action="ThanhToan" method="post">
						<button type="submit" class="btn-pay w-100">THANH TOÁN</button>
					</form>
				</div>
			</div>
		</div>
	</div>
	<button id="clear-cart" class="btn btn-danger">Xóa giỏ hàng</button>
	@* thêm *@
	<script>
		function updateQuantity(maSach, change) {
			var quantityInput = document.getElementById('input-quantity-' + maSach);
			var quantitySpan = document.getElementById('quantity-' + maSach);

			// Cập nhật số lượng mới
			var newQuantity = parseInt(quantityInput.value) + change;

			if (newQuantity >= 0) {  // Đảm bảo số lượng không âm
				quantityInput.value = newQuantity;
				quantitySpan.textContent = newQuantity;  // Cập nhật số lượng hiển thị

				// Gửi form sau khi thay đổi số lượng
				var form = document.getElementById('form-' + maSach);
				form.submit();  // Gửi form khi số lượng thay đổi
			}
		}
	</script>
	@* xóa *@
	<script>
		document.getElementById("clear-cart").addEventListener("click", async function () {
			try {
				const response = await fetch("/GioHang/XoaGioHang", {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					}
				});
				const data = await response.json();
				if (data.success) {
					location.reload(); // reload lại trang để cập nhật giỏ hàng rỗng
				} else {
					alert("Xóa giỏ hàng thất bại!");
				}
			} catch (error) {
				console.error("Lỗi:", error);
			}

		});
	</script>
	@* Chọn *@
	<script>
		// Hàm tính tổng tiền
		function updateTotalPrice() {
			var total = 0;

			// Lặp qua tất cả các checkbox đã chọn và tính tổng tiền
			document.querySelectorAll('.product-checkbox:checked').forEach(function (checkbox) {
				var maSach = checkbox.getAttribute('data-masach');
				var quantity = document.getElementById('input-quantity-' + maSach).value;
				var price = document.getElementById('price-' + maSach).textContent;  // Lấy giá từ sản phẩm (nếu có)

				total += parseInt(price) * parseInt(quantity);  // Cộng thêm vào tổng tiền
			});

			// Cập nhật tổng tiền vào UI
			document.querySelector('.tong-tien').textContent = total + ' đ';  // Cập nhật vào phần tổng tiền
		}

		// Lắng nghe sự kiện thay đổi của checkbox
		document.querySelectorAll('.product-checkbox').forEach(function (checkbox) {
			checkbox.addEventListener('change', function () {
				var maSach = this.getAttribute('data-masach');
				var isChecked = this.checked;

				// Cập nhật tổng tiền khi checkbox thay đổi
				updateTotalPrice();

				// Nếu checkbox được chọn
				if (isChecked) {
					console.log("Sản phẩm với mã " + maSach + " đã được chọn.");
				} else {
					console.log("Sản phẩm với mã " + maSach + " đã bị bỏ chọn.");
				}
			});
		});

		// Hàm chọn tất cả checkbox
		function toggleAll(source) {
			var checkboxes = document.querySelectorAll('.product-checkbox');
			checkboxes.forEach(function (checkbox) {
				checkbox.checked = source.checked;
			});

			// Cập nhật tổng tiền sau khi chọn tất cả hoặc bỏ chọn
			updateTotalPrice();
		}
	</script>




</body>

</html>



